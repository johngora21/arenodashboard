"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import Sidebar from "@/components/Sidebar"
import Header from "@/components/Header"
import { useAuth } from "@/components/AuthProvider"
import { useRouter } from "next/navigation"
import { 
  Plus, 
  Search, 
  RefreshCw, 
  Edit, 
  Trash2, 
  Eye,
  Package,
  Users,
  Tool,
  FileText,
  TrendingUp,
  Database,
  AlertTriangle,
  CheckCircle,
  Clock,
  Truck,
  Box,
  Wrench,
  Shirt,
  DollarSign,
  BarChart3,
  X,
  Car,
  Fuel,
  Zap,
  Shield,
  Briefcase,
  Home,
  ShoppingCart,
  Heart,
  Star,
  Settings,
  Camera,
  Phone,
  Monitor,
  Printer,
  Keyboard,
  Mouse,
  Headphones,
  Book,
  Map,
  Globe,
  Flag,
  Gift,
  Coffee,
  Utensils,
  Bed,
  Bath,
  Couch,
  Chair,
  Table,
  Lamp,
  Fan,
  Thermometer,
  Droplets,
  Sun,
  Moon,
  Cloud,
  Wind,
  Leaf,
  Tree,
  Flower,
  Seedling,
  Bug,
  Fish,
  Bird,
  Dog,
  Cat,
  Music,
  Video,
  Film,
  Radio,
  Speaker,
  Microphone,
  Guitar,
  Drum,
  Piano,
  Palette,
  Brush,
  Scissors,
  Ruler,
  Compass,
  Calculator,
  Calendar,
  Timer,
  Bell,
  Volume2,
  VolumeX,
  Mute,
  Play,
  Pause,
  List,
  Grid,
  Layout,
  Move,
  ZoomIn,
  ZoomOut,
  Minus,
  PlusCircle,
  MinusCircle,
  XCircle,
  CheckCircle2,
  AlertCircle,
  Info,
  HelpCircle,
  ExternalLink,
  Link,
  Link2,
  Unlink,
  Lock,
  Unlock,
  Key,
  EyeOff,
  ShieldCheck,
  ShieldAlert,
  ShieldX,
  ShieldOff,
  CreditCard,
  Wallet,
  PiggyBank,
  Banknote,
  Coins,
  Bitcoin,
  TrendingDown,
  Activity,
  BarChart,
  BarChart2,
  BarChart4,
  PieChart,
  LineChart,
  AreaChart,
  Radar,
  Gauge,
  Target,
  Award,
  Trophy,
  Medal,
  Crown,
  ZapOff,
  Lightning,
  LightningBolt,
  CloudRain,
  CloudSnow,
  CloudLightning,
  CloudDrizzle,
  CloudFog,
  Sunrise,
  Sunset,
  Umbrella,
  Snowflake,
  Waves,
  Mountain,
  MountainSnow,
  Volcano,
  TreePine,
  TreeDeciduous,
  Flower2,
  Sprout,
  Cactus,
  Mushroom,
  Butterfly,
  Bee,
  Ant,
  Spider,
  Shark,
  Whale,
  Dolphin,
  Octopus,
  Crab,
  Lobster,
  Shrimp,
  Eagle,
  Owl,
  Parrot,
  Penguin,
  Chicken,
  Duck,
  Goose,
  Turkey,
  Dove,
  Crow,
  Sparrow,
  Robin,
  Bluebird,
  Cardinal,
  Hummingbird,
  Peacock,
  Swan,
  Stork,
  Crane,
  Heron,
  Flamingo,
  Toucan,
  Kiwi,
  Emu,
  Ostrich,
  Rabbit,
  Hamster,
  GuineaPig,
  Rat,
  Gerbil,
  Ferret,
  Chinchilla,
  Hedgehog,
  Squirrel,
  Chipmunk,
  Raccoon,
  Skunk,
  Opossum,
  Beaver,
  Porcupine,
  Armadillo,
  Sloth,
  Anteater,
  Pangolin,
  Bat,
  Fox,
  Wolf,
  Coyote,
  Jackal,
  Hyena,
  Bear,
  PolarBear,
  Panda,
  Koala,
  Kangaroo,
  Wallaby,
  Wombat,
  TasmanianDevil,
  Platypus,
  Echidna,
  Donkey,
  Mule,
  Zebra,
  Giraffe,
  Elephant,
  Rhinoceros,
  Hippopotamus,
  Buffalo,
  Bison,
  Yak,
  Ox,
  Cow,
  Bull,
  Heifer,
  Calf,
  Sheep,
  Goat,
  Llama,
  Alpaca,
  Camel,
  Dromedary,
  Deer,
  Moose,
  Elk,
  Caribou,
  Reindeer,
  Antelope,
  Gazelle,
  Impala,
  Wildebeest,
  Springbok,
  Oryx,
  Addax,
  Kudu,
  Eland,
  Bongo,
  Okapi,
  Gemsbok,
  Sable,
  Roan,
  Hartebeest,
  Topi,
  Tsessebe,
  Bontebok,
  Blesbok,
  Waterbuck,
  Kob,
  Lechwe,
  Puku,
  Reedbuck,
  MountainReedbuck,
  BohorReedbuck,
  SouthernReedbuck,
  GreyRhebok,
  VaalRhebok,
  SharpeGrysbok,
  CapeGrysbok,
  Steenbok,
  Oribi,
  Suni,
  Beira,
  DikDik,
  Klipspringer,
  Duiker,
  BlueDuiker,
  RedDuiker,
  YellowBackedDuiker,
  BayDuiker,
  JentinkDuiker,
  ZebraDuiker,
  OgilbyDuiker,
  PetersDuiker,
  WeynsDuiker,
  WhiteBellyDuiker,
  BlackDuiker,
  MaxwellDuiker,
  WalterDuiker,
  RuwenzoriDuiker,
  AbbottDuiker
} from "lucide-react"
import { 
  getAllInventoryItems, 
  addInventoryItem, 
  updateInventoryItem, 
  deleteInventoryItem, 
  getInventoryStats,
  searchInventoryItems,
  InventoryItem,
  InventoryStats
} from "@/lib/firebase-service"
import { collection, getDocs, deleteDoc, addDoc } from 'firebase/firestore'
import { db } from '@/lib/firebase-config'

interface NewInventoryForm {
  name: string
  sku: string
  category: string
  description: string
  supplier: string
  unit: string
  quantity: string
  minQuantity: string
  maxQuantity: string
  unitPrice: string
  location: string
}

export default function InventoryPage() {
  const { user, loading } = useAuth()
  const router = useRouter()
  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>([])
  const [stats, setStats] = useState<InventoryStats | null>(null)
  const [dataLoading, setDataLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<string>("all")
  const [categoryFilter, setCategoryFilter] = useState<string>("all")
  const [showAddItem, setShowAddItem] = useState(false)
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null)
  const [formLoading, setFormLoading] = useState(false)
  const [showOutgoings, setShowOutgoings] = useState(false)
  const [outgoingsForm, setOutgoingsForm] = useState({
    itemId: '',
    quantity: '',
    reason: '',
    destination: '',
    notes: ''
  })
  const [outgoingsLoading, setOutgoingsLoading] = useState(false)
  const [categories, setCategories] = useState<string[]>([])
  const [showCategories, setShowCategories] = useState(false)
  const [newCategory, setNewCategory] = useState('')
  const [editingCategory, setEditingCategory] = useState<{index: number, name: string} | null>(null)
  const [categoryIcons, setCategoryIcons] = useState<{[key: string]: string}>({})
  const [showIconSelector, setShowIconSelector] = useState(false)
  const [selectedCategoryForIcon, setSelectedCategoryForIcon] = useState<string>('')
  const [formData, setFormData] = useState<NewInventoryForm>({
    name: '',
    sku: '',
    category: '',
    description: '',
    supplier: '',
    unit: '',
    quantity: '',
    minQuantity: '',
    maxQuantity: '',
    unitPrice: '',
    location: ''
  })

  useEffect(() => {
    if (!loading && !user) {
      router.push('/login')
    }
  }, [user, loading, router])

  useEffect(() => {
    if (user) {
      loadInventoryItems()
      loadCategories()
    }
  }, [user])

  const loadInventoryItems = async () => {
    try {
      setDataLoading(true)
      const [items, inventoryStats] = await Promise.all([
        getAllInventoryItems(),
        getInventoryStats()
      ])
      setInventoryItems(items)
      setStats(inventoryStats)
    } catch (err) {
      console.error('Error loading inventory items:', err)
    } finally {
      setDataLoading(false)
    }
  }

  const handleAddItem = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      setFormLoading(true)
      
      // Filter out undefined values and convert strings to numbers
      const itemData = {
        name: formData.name,
        sku: formData.sku,
        category: formData.category,
        description: formData.description,
        supplier: formData.supplier,
        unit: formData.unit,
        quantity: parseInt(formData.quantity) || 0,
        minQuantity: parseInt(formData.minQuantity) || 0,
        maxQuantity: parseInt(formData.maxQuantity) || 0,
        unitPrice: parseFloat(formData.unitPrice) || 0,
        totalValue: (parseInt(formData.quantity) || 0) * (parseFloat(formData.unitPrice) || 0),
        location: formData.location,
        status: 'in-stock' as const
      }

      await addInventoryItem(itemData)
      setShowAddItem(false)
      setFormData({
        name: '',
        sku: '',
        category: '',
        description: '',
        supplier: '',
        unit: '',
        quantity: '',
        minQuantity: '',
        maxQuantity: '',
        unitPrice: '',
        location: ''
      })
      await loadInventoryItems()
    } catch (error) {
      console.error('Error adding inventory item:', error)
    } finally {
      setFormLoading(false)
    }
  }

  const handleDeleteItem = async (itemId: string) => {
    if (confirm('Are you sure you want to delete this item?')) {
      try {
        await deleteInventoryItem(itemId)
        await loadInventoryItems()
      } catch (error) {
        console.error('Error deleting inventory item:', error)
      }
    }
  }

  const handleUpdateOutgoings = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      setOutgoingsLoading(true)
      
      const selectedInventoryItem = inventoryItems.find(item => item.id === outgoingsForm.itemId)
      if (!selectedInventoryItem) {
        alert('Selected item not found')
        return
      }

      const quantityUsed = parseInt(outgoingsForm.quantity)
      if (quantityUsed > selectedInventoryItem.quantity) {
        alert('Cannot use more quantity than available in stock')
        return
      }

      // Calculate new quantity and status
      const newQuantity = selectedInventoryItem.quantity - quantityUsed
      let newStatus = selectedInventoryItem.status
      
      if (newQuantity === 0) {
        newStatus = 'out-of-stock'
      } else if (newQuantity <= selectedInventoryItem.minQuantity) {
        newStatus = 'low-stock'
      } else {
        newStatus = 'in-stock'
      }

      // Update the inventory item
      await updateInventoryItem(selectedInventoryItem.id, {
        quantity: newQuantity,
        status: newStatus,
        totalValue: newQuantity * selectedInventoryItem.unitPrice
      })

      // Record the outgoing transaction
      const outgoingData = {
        itemId: selectedInventoryItem.id,
        itemName: selectedInventoryItem.name,
        sku: selectedInventoryItem.sku,
        quantityUsed: quantityUsed,
        unit: selectedInventoryItem.unit,
        unitPrice: selectedInventoryItem.unitPrice,
        totalValue: quantityUsed * selectedInventoryItem.unitPrice,
        reason: outgoingsForm.reason,
        destination: outgoingsForm.destination,
        notes: outgoingsForm.notes,
        date: new Date(),
        previousQuantity: selectedInventoryItem.quantity,
        newQuantity: newQuantity
      }

      // Add to outgoings collection
      const outgoingsRef = collection(db, 'inventoryOutgoings')
      await addDoc(outgoingsRef, outgoingData)

      // Reset form and close modal
      setShowOutgoings(false)
      setOutgoingsForm({
        itemId: '',
        quantity: '',
        reason: '',
        destination: '',
        notes: ''
      })
      
      await loadInventoryItems()
      alert('Outgoing recorded successfully!')
    } catch (error) {
      console.error('Error updating outgoings:', error)
      alert('Error recording outgoing. Please try again.')
    } finally {
      setOutgoingsLoading(false)
    }
  }

  const handleAddCategory = () => {
    if (newCategory.trim() && !categories.includes(newCategory.trim())) {
      setCategories([...categories, newCategory.trim()])
      setNewCategory('')
    }
  }

  const handleEditCategory = () => {
    if (editingCategory && editingCategory.name.trim()) {
      const updatedCategories = [...categories]
      updatedCategories[editingCategory.index] = editingCategory.name.trim()
      setCategories(updatedCategories)
      setEditingCategory(null)
    }
  }

  const handleDeleteCategory = (index: number) => {
    if (confirm('Are you sure you want to delete this category?')) {
      const updatedCategories = categories.filter((_, i) => i !== index)
      setCategories(updatedCategories)
    }
  }

  const handleSelectIcon = (categoryName: string, iconName: string) => {
    setCategoryIcons(prev => ({
      ...prev,
      [categoryName]: iconName
    }))
    setShowIconSelector(false)
    setSelectedCategoryForIcon('')
  }

  const getCategoryIcon = (categoryName: string) => {
    const iconName = categoryIcons[categoryName]
    if (iconName && iconLibrary[iconName as keyof typeof iconLibrary]) {
      const IconComponent = iconLibrary[iconName as keyof typeof iconLibrary]
      return <IconComponent className="h-4 w-4" />
    }
    return <Package className="h-4 w-4" /> // Default icon
  }

  const loadCategories = async () => {
    try {
      const categoriesRef = collection(db, 'inventoryCategories')
      const querySnapshot = await getDocs(categoriesRef)
      const loadedCategories: string[] = []
      const loadedIcons: {[key: string]: string} = {}
      querySnapshot.forEach((doc) => {
        const data = doc.data()
        if (data.name) {
          loadedCategories.push(data.name)
          if (data.icon) {
            loadedIcons[data.name] = data.icon
          }
        }
      })
      setCategories(loadedCategories)
      setCategoryIcons(loadedIcons)
    } catch (error) {
      console.error('Error loading categories:', error)
    }
  }

  const saveCategories = async () => {
    try {
      // Clear existing categories
      const categoriesRef = collection(db, 'inventoryCategories')
      const querySnapshot = await getDocs(categoriesRef)
      const deletePromises = querySnapshot.docs.map(doc => deleteDoc(doc.ref))
      await Promise.all(deletePromises)

      // Add new categories with icons
      const addPromises = categories.map(category => 
        addDoc(categoriesRef, { 
          name: category, 
          icon: categoryIcons[category] || 'Package',
          createdAt: new Date() 
        })
      )
      await Promise.all(addPromises)

      setShowCategories(false)
      alert('Categories saved successfully!')
    } catch (error) {
      console.error('Error saving categories:', error)
      alert('Error saving categories. Please try again.')
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'in-stock': return 'bg-green-50 text-green-700 border-green-200'
      case 'low-stock': return 'bg-yellow-50 text-yellow-700 border-yellow-200'
      case 'out-of-stock': return 'bg-red-50 text-red-700 border-red-200'
      case 'discontinued': return 'bg-gray-50 text-gray-700 border-gray-200'
      default: return 'bg-gray-50 text-gray-700 border-gray-200'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'in-stock': return <CheckCircle className="h-4 w-4" />
      case 'low-stock': return <AlertTriangle className="h-4 w-4" />
      case 'out-of-stock': return <Clock className="h-4 w-4" />
      case 'discontinued': return <Database className="h-4 w-4" />
      default: return <Database className="h-4 w-4" />
    }
  }

  const filteredInventoryItems = inventoryItems.filter(item => 
    item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.supplier.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.location.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const getStockPercentage = (quantity: number, maxQuantity: number) => {
    if (maxQuantity === 0) return 0
    return Math.round((quantity / maxQuantity) * 100)
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'TZS',
      minimumFractionDigits: 0
    }).format(amount)
  }

  const formatTimestamp = (timestamp: any) => {
    if (!timestamp) return 'N/A'
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  // Icon library - mapping icon names to their components
  const iconLibrary = {
    'Package': Package,
    'Truck': Truck,
    'Car': Car,
    'Fuel': Fuel,
    'Wrench': Wrench,
    'Tool': Tool,
    'Shirt': Shirt,
    'Shield': Shield,
    'Box': Box,
    'Database': Database,
    'BarChart3': BarChart3,
    'DollarSign': DollarSign,
    'Users': Users,
    'FileText': FileText,
    'TrendingUp': TrendingUp,
    'CheckCircle': CheckCircle,
    'AlertTriangle': AlertTriangle,
    'Clock': Clock,
    'Zap': Zap,
    'Briefcase': Briefcase,
    'Home': Home,
    'ShoppingCart': ShoppingCart,
    'Heart': Heart,
    'Star': Star,
    'Settings': Settings,
    'Camera': Camera,
    'Phone': Phone,
    'Monitor': Monitor,
    'Printer': Printer,
    'Keyboard': Keyboard,
    'Mouse': Mouse,
    'Headphones': Headphones,
    'Book': Book,
    'Map': Map,
    'Globe': Globe,
    'Flag': Flag,
    'Gift': Gift,
    'Coffee': Coffee,
    'Utensils': Utensils,
    'Bed': Bed,
    'Bath': Bath,
    'Couch': Couch,
    'Chair': Chair,
    'Table': Table,
    'Lamp': Lamp,
    'Fan': Fan,
    'Thermometer': Thermometer,
    'Droplets': Droplets,
    'Sun': Sun,
    'Moon': Moon,
    'Cloud': Cloud,
    'Wind': Wind,
    'Leaf': Leaf,
    'Tree': Tree,
    'Flower': Flower,
    'Seedling': Seedling,
    'Bug': Bug,
    'Fish': Fish,
    'Bird': Bird,
    'Dog': Dog,
    'Cat': Cat,
    'Music': Music,
    'Video': Video,
    'Film': Film,
    'Radio': Radio,
    'Speaker': Speaker,
    'Microphone': Microphone,
    'Guitar': Guitar,
    'Drum': Drum,
    'Piano': Piano,
    'Palette': Palette,
    'Brush': Brush,
    'Scissors': Scissors,
    'Ruler': Ruler,
    'Compass': Compass,
    'Calculator': Calculator,
    'Calendar': Calendar,
    'Timer': Timer,
    'Bell': Bell,
    'Volume2': Volume2,
    'VolumeX': VolumeX,
    'Mute': Mute,
    'Play': Play,
    'Pause': Pause,
    'List': List,
    'Grid': Grid,
    'Layout': Layout,
    'Move': Move,
    'ZoomIn': ZoomIn,
    'ZoomOut': ZoomOut,
    'Minus': Minus,
    'PlusCircle': PlusCircle,
    'MinusCircle': MinusCircle,
    'XCircle': XCircle,
    'CheckCircle2': CheckCircle2,
    'AlertCircle': AlertCircle,
    'Info': Info,
    'HelpCircle': HelpCircle,
    'ExternalLink': ExternalLink,
    'Link': Link,
    'Link2': Link2,
    'Unlink': Unlink,
    'Lock': Lock,
    'Unlock': Unlock,
    'Key': Key,
    'EyeOff': EyeOff,
    'ShieldCheck': ShieldCheck,
    'ShieldAlert': ShieldAlert,
    'ShieldX': ShieldX,
    'ShieldOff': ShieldOff,
    'CreditCard': CreditCard,
    'Wallet': Wallet,
    'PiggyBank': PiggyBank,
    'Banknote': Banknote,
    'Coins': Coins,
    'Bitcoin': Bitcoin,
    'TrendingDown': TrendingDown,
    'Activity': Activity,
    'BarChart': BarChart,
    'BarChart2': BarChart2,
    'BarChart4': BarChart4,
    'PieChart': PieChart,
    'LineChart': LineChart,
    'AreaChart': AreaChart,
    'Radar': Radar,
    'Gauge': Gauge,
    'Target': Target,
    'Award': Award,
    'Trophy': Trophy,
    'Medal': Medal,
    'Crown': Crown,
    'ZapOff': ZapOff,
    'Lightning': Lightning,
    'LightningBolt': LightningBolt,
    'CloudRain': CloudRain,
    'CloudSnow': CloudSnow,
    'CloudLightning': CloudLightning,
    'CloudDrizzle': CloudDrizzle,
    'CloudFog': CloudFog,
    'Sunrise': Sunrise,
    'Sunset': Sunset,
    'Umbrella': Umbrella,
    'Snowflake': Snowflake,
    'Waves': Waves,
    'Mountain': Mountain,
    'MountainSnow': MountainSnow,
    'Volcano': Volcano,
    'TreePine': TreePine,
    'TreeDeciduous': TreeDeciduous,
    'Flower2': Flower2,
    'Sprout': Sprout,
    'Cactus': Cactus,
    'Mushroom': Mushroom,
    'Butterfly': Butterfly,
    'Bee': Bee,
    'Ant': Ant,
    'Spider': Spider,
    'Shark': Shark,
    'Whale': Whale,
    'Dolphin': Dolphin,
    'Octopus': Octopus,
    'Crab': Crab,
    'Lobster': Lobster,
    'Shrimp': Shrimp,
    'Eagle': Eagle,
    'Owl': Owl,
    'Parrot': Parrot,
    'Penguin': Penguin,
    'Chicken': Chicken,
    'Duck': Duck,
    'Goose': Goose,
    'Turkey': Turkey,
    'Dove': Dove,
    'Crow': Crow,
    'Sparrow': Sparrow,
    'Robin': Robin,
    'Bluebird': Bluebird,
    'Cardinal': Cardinal,
    'Hummingbird': Hummingbird,
    'Peacock': Peacock,
    'Swan': Swan,
    'Stork': Stork,
    'Crane': Crane,
    'Heron': Heron,
    'Flamingo': Flamingo,
    'Toucan': Toucan,
    'Kiwi': Kiwi,
    'Emu': Emu,
    'Ostrich': Ostrich,
    'Rabbit': Rabbit,
    'Hamster': Hamster,
    'GuineaPig': GuineaPig,
    'Rat': Rat,
    'Gerbil': Gerbil,
    'Ferret': Ferret,
    'Chinchilla': Chinchilla,
    'Hedgehog': Hedgehog,
    'Squirrel': Squirrel,
    'Chipmunk': Chipmunk,
    'Raccoon': Raccoon,
    'Skunk': Skunk,
    'Opossum': Opossum,
    'Beaver': Beaver,
    'Porcupine': Porcupine,
    'Armadillo': Armadillo,
    'Sloth': Sloth,
    'Anteater': Anteater,
    'Pangolin': Pangolin,
    'Bat': Bat,
    'Fox': Fox,
    'Wolf': Wolf,
    'Coyote': Coyote,
    'Jackal': Jackal,
    'Hyena': Hyena,
    'Bear': Bear,
    'PolarBear': PolarBear,
    'Panda': Panda,
    'Koala': Koala,
    'Kangaroo': Kangaroo,
    'Wallaby': Wallaby,
    'Wombat': Wombat,
    'TasmanianDevil': TasmanianDevil,
    'Platypus': Platypus,
    'Echidna': Echidna,
    'Donkey': Donkey,
    'Mule': Mule,
    'Zebra': Zebra,
    'Giraffe': Giraffe,
    'Elephant': Elephant,
    'Rhinoceros': Rhinoceros,
    'Hippopotamus': Hippopotamus,
    'Buffalo': Buffalo,
    'Bison': Bison,
    'Yak': Yak,
    'Ox': Ox,
    'Cow': Cow,
    'Bull': Bull,
    'Heifer': Heifer,
    'Calf': Calf,
    'Sheep': Sheep,
    'Goat': Goat,
    'Llama': Llama,
    'Alpaca': Alpaca,
    'Camel': Camel,
    'Dromedary': Dromedary,
    'Deer': Deer,
    'Moose': Moose,
    'Elk': Elk,
    'Caribou': Caribou,
    'Reindeer': Reindeer,
    'Antelope': Antelope,
    'Gazelle': Gazelle,
    'Impala': Impala,
    'Wildebeest': Wildebeest,
    'Springbok': Springbok,
    'Oryx': Oryx,
    'Addax': Addax,
    'Kudu': Kudu,
    'Eland': Eland,
    'Bongo': Bongo,
    'Okapi': Okapi,
    'Gemsbok': Gemsbok,
    'Sable': Sable,
    'Roan': Roan,
    'Hartebeest': Hartebeest,
    'Topi': Topi,
    'Tsessebe': Tsessebe,
    'Bontebok': Bontebok,
    'Blesbok': Blesbok,
    'Waterbuck': Waterbuck,
    'Kob': Kob,
    'Lechwe': Lechwe,
    'Puku': Puku,
    'Reedbuck': Reedbuck,
    'MountainReedbuck': MountainReedbuck,
    'BohorReedbuck': BohorReedbuck,
    'SouthernReedbuck': SouthernReedbuck,
    'GreyRhebok': GreyRhebok,
    'VaalRhebok': VaalRhebok,
    'SharpeGrysbok': SharpeGrysbok,
    'CapeGrysbok': CapeGrysbok,
    'Steenbok': Steenbok,
    'Oribi': Oribi,
    'Suni': Suni,
    'Beira': Beira,
    'DikDik': DikDik,
    'Klipspringer': Klipspringer,
    'Duiker': Duiker,
    'BlueDuiker': BlueDuiker,
    'RedDuiker': RedDuiker,
    'YellowBackedDuiker': YellowBackedDuiker,
    'BayDuiker': BayDuiker,
    'JentinkDuiker': JentinkDuiker,
    'ZebraDuiker': ZebraDuiker,
    'OgilbyDuiker': OgilbyDuiker,
    'PetersDuiker': PetersDuiker,
    'WeynsDuiker': WeynsDuiker,
    'WhiteBellyDuiker': WhiteBellyDuiker,
    'BlackDuiker': BlackDuiker,
    'MaxwellDuiker': MaxwellDuiker,
    'WalterDuiker': WalterDuiker,
    'RuwenzoriDuiker': RuwenzoriDuiker,
    'AbbottDuiker': AbbottDuiker
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center">
        <div className="text-center">
          <div className="bg-white rounded-2xl shadow-xl p-8 max-w-sm mx-4">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
            <p className="text-slate-600 font-medium">Loading authentication...</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex">
      <Sidebar />
      <div className="flex-1 lg:ml-0">
        <Header />
        
        <main className="p-6">
          <div className="max-w-7xl mx-auto">
            {/* Page Header */}
            <div className="mb-8">
              <h1 className="text-3xl font-bold text-slate-900 mb-2">Inventory Management</h1>
              <p className="text-slate-600">Manage inventory and resources for all services</p>
            </div>

            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-slate-600">Total Items</p>
                    <p className="text-2xl font-bold text-slate-900">{stats?.totalItems || inventoryItems.length}</p>
                  </div>
                  <div className="bg-blue-100 p-3 rounded-lg">
                    <Database className="h-6 w-6 text-blue-600" />
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-slate-600">Total Value</p>
                    <p className="text-2xl font-bold text-green-600">
                      {stats?.totalValue ? formatCurrency(stats.totalValue) : formatCurrency(inventoryItems.reduce((sum, item) => sum + item.totalValue, 0))}
                    </p>
                  </div>
                  <div className="bg-green-100 p-3 rounded-lg">
                    <DollarSign className="h-6 w-6 text-green-600" />
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-slate-600">Low Stock Items</p>
                    <p className="text-2xl font-bold text-yellow-600">
                      {stats?.lowStockItems || inventoryItems.filter(i => i.status === 'low-stock').length}
                    </p>
                  </div>
                  <div className="bg-yellow-100 p-3 rounded-lg">
                    <AlertTriangle className="h-6 w-6 text-yellow-600" />
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-slate-600">Out of Stock</p>
                    <p className="text-2xl font-bold text-red-600">
                      {stats?.outOfStockItems || inventoryItems.filter(i => i.status === 'out-of-stock').length}
                    </p>
                  </div>
                  <div className="bg-red-100 p-3 rounded-lg">
                    <Clock className="h-6 w-6 text-red-600" />
                  </div>
                </div>
              </div>
            </div>

            {/* Controls */}
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                <div className="flex flex-col sm:flex-row gap-4 flex-1">
                  <div className="relative flex-1 max-w-md">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4" />
                    <input
                      type="text"
                      placeholder="Search inventory items..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    />
                  </div>
                </div>

                <div className="flex gap-2">
                  <Button
                    onClick={loadInventoryItems}
                    variant="outline"
                    className="flex items-center gap-2"
                  >
                    <RefreshCw className="h-4 w-4" />
                    Refresh
                  </Button>
                  <Button
                    onClick={() => setShowCategories(true)}
                    variant="outline"
                    className="flex items-center gap-2 text-green-600 border-green-300 hover:bg-green-50"
                  >
                    <Database className="h-4 w-4" />
                    Manage Categories
                  </Button>
                  <Button
                    onClick={() => setShowAddItem(true)}
                    className="flex items-center gap-2 bg-orange-500 hover:bg-orange-600"
                  >
                    <Plus className="h-4 w-4" />
                    Add Item
                  </Button>
                  <Button
                    onClick={() => setShowOutgoings(true)}
                    variant="outline"
                    className="flex items-center gap-2 text-blue-600 border-blue-300 hover:bg-blue-50"
                  >
                    <Package className="h-4 w-4" />
                    Update Outgoings
                  </Button>
                </div>
              </div>
            </div>

            {/* Inventory Table */}
            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
              {dataLoading ? (
                <div className="p-8 text-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mx-auto mb-4"></div>
                  <p className="text-slate-600">Loading inventory items...</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-slate-50 border-b border-slate-200">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          Item
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          SKU
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          Category
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          Quantity
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          Unit Price
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          Total Value
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          Status
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          Location
                        </th>
                        <th className="px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider">
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-slate-200">
                      {filteredInventoryItems.map((item) => (
                        <tr key={item.id} className="hover:bg-slate-50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="flex-shrink-0 h-10 w-10">
                                <div className="h-10 w-10 rounded-full bg-orange-100 flex items-center justify-center">
                                  {getCategoryIcon(item.category)}
                                </div>
                              </div>
                              <div className="ml-4">
                                <div className="text-sm font-medium text-slate-900">{item.name}</div>
                                <div className="text-sm text-slate-500">{item.description}</div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">
                            {item.sku}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              {getCategoryIcon(item.category)}
                              <span className="ml-2 text-sm text-slate-900">{item.category}</span>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-slate-900">
                              {item.quantity} {item.unit}
                            </div>
                            <div className="flex items-center mt-1">
                              <div className="w-16 bg-slate-200 rounded-full h-2 mr-2">
                                <div 
                                  className={`h-2 rounded-full ${
                                    getStockPercentage(item.quantity, item.maxQuantity) > 50 
                                      ? 'bg-green-500' 
                                      : getStockPercentage(item.quantity, item.maxQuantity) > 20 
                                        ? 'bg-yellow-500' 
                                        : 'bg-red-500'
                                  }`}
                                  style={{ width: `${getStockPercentage(item.quantity, item.maxQuantity)}%` }}
                                ></div>
                              </div>
                              <span className="text-xs text-slate-500">
                                {getStockPercentage(item.quantity, item.maxQuantity)}%
                              </span>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">
                            {formatCurrency(item.unitPrice)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">
                            {formatCurrency(item.totalValue)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(item.status)}`}>
                              {getStatusIcon(item.status)}
                              <span className="ml-1 capitalize">{item.status.replace('-', ' ')}</span>
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            {item.location}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <div className="flex items-center justify-end space-x-2">
                              <button className="text-slate-400 hover:text-slate-600">
                                <Eye className="h-4 w-4" />
                              </button>
                              <button className="text-blue-400 hover:text-blue-600">
                                <Edit className="h-4 w-4" />
                              </button>
                              <button 
                                onClick={() => handleDeleteItem(item.id)}
                                className="text-red-400 hover:text-red-600"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </main>
      </div>

      {/* Add Item Modal */}
      {showAddItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-slate-900">Add New Inventory Item</h2>
              <button
                onClick={() => setShowAddItem(false)}
                className="text-slate-400 hover:text-slate-600"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <form onSubmit={handleAddItem} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Item Name *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter item name"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    SKU *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.sku}
                    onChange={(e) => setFormData({...formData, sku: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter SKU"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Category *
                  </label>
                  <select
                    required
                    value={formData.category}
                    onChange={(e) => setFormData({...formData, category: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  >
                    <option value="">Select category</option>
                    {categories.map((category) => (
                      <option key={category} value={category}>
                        {category}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Supplier *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.supplier}
                    onChange={(e) => setFormData({...formData, supplier: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter supplier name"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Unit *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.unit}
                    onChange={(e) => setFormData({...formData, unit: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="e.g., pieces, liters, kg"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Quantity *
                  </label>
                  <input
                    type="number"
                    required
                    min="0"
                    value={formData.quantity}
                    onChange={(e) => setFormData({...formData, quantity: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter quantity"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Minimum Quantity *
                  </label>
                  <input
                    type="number"
                    required
                    min="0"
                    value={formData.minQuantity}
                    onChange={(e) => setFormData({...formData, minQuantity: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter minimum quantity"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Maximum Quantity *
                  </label>
                  <input
                    type="number"
                    required
                    min="0"
                    value={formData.maxQuantity}
                    onChange={(e) => setFormData({...formData, maxQuantity: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter maximum quantity"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Unit Price (TZS) *
                  </label>
                  <input
                    type="number"
                    required
                    min="0"
                    step="0.01"
                    value={formData.unitPrice}
                    onChange={(e) => setFormData({...formData, unitPrice: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter unit price"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Location *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.location}
                    onChange={(e) => setFormData({...formData, location: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter storage location"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Description
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  rows={3}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="Enter item description"
                />
              </div>

              <div className="flex justify-end gap-3 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowAddItem(false)}
                  disabled={formLoading}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  className="bg-orange-500 hover:bg-orange-600"
                  disabled={formLoading}
                >
                  {formLoading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Adding...
                    </>
                  ) : (
                    'Add Item'
                  )}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Update Outgoings Modal */}
      {showOutgoings && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-slate-900">Update Inventory Outgoings</h2>
              <button
                onClick={() => setShowOutgoings(false)}
                className="text-slate-400 hover:text-slate-600"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <form onSubmit={handleUpdateOutgoings} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Select Item *
                  </label>
                  <select
                    required
                    value={outgoingsForm.itemId}
                    onChange={(e) => setOutgoingsForm({...outgoingsForm, itemId: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  >
                    <option value="">Select an item</option>
                    {inventoryItems
                      .filter(item => item.quantity > 0)
                      .map((item) => (
                        <option key={item.id} value={item.id}>
                          {item.name} - {item.quantity} {item.unit} available
                        </option>
                      ))
                    }
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Quantity Used *
                  </label>
                  <input
                    type="number"
                    required
                    min="1"
                    value={outgoingsForm.quantity}
                    onChange={(e) => setOutgoingsForm({...outgoingsForm, quantity: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Enter quantity used"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Reason *
                  </label>
                  <select
                    required
                    value={outgoingsForm.reason}
                    onChange={(e) => setOutgoingsForm({...outgoingsForm, reason: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  >
                    <option value="">Select reason</option>
                    <option value="Vehicle Maintenance">Vehicle Maintenance</option>
                    <option value="Fuel Consumption">Fuel Consumption</option>
                    <option value="Safety Equipment">Safety Equipment</option>
                    <option value="Packaging">Packaging</option>
                    <option value="Customer Delivery">Customer Delivery</option>
                    <option value="Internal Use">Internal Use</option>
                    <option value="Damaged/Expired">Damaged/Expired</option>
                    <option value="Transfer">Transfer</option>
                    <option value="Other">Other</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Destination
                  </label>
                  <input
                    type="text"
                    value={outgoingsForm.destination}
                    onChange={(e) => setOutgoingsForm({...outgoingsForm, destination: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                    placeholder="Where is it going?"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Notes
                </label>
                <textarea
                  value={outgoingsForm.notes}
                  onChange={(e) => setOutgoingsForm({...outgoingsForm, notes: e.target.value})}
                  rows={3}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="Additional notes about this outgoing"
                />
              </div>

              <div className="flex justify-end gap-3 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowOutgoings(false)}
                  disabled={outgoingsLoading}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  className="bg-blue-500 hover:bg-blue-600"
                  disabled={outgoingsLoading}
                >
                  {outgoingsLoading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Recording...
                    </>
                  ) : (
                    'Record Outgoing'
                  )}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Categories Management Modal */}
      {showCategories && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-slate-900">Manage Categories</h2>
              <button
                onClick={() => setShowCategories(false)}
                className="text-slate-400 hover:text-slate-600"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <div className="space-y-6">
              {/* Add New Category */}
              <div className="bg-slate-50 p-4 rounded-lg">
                <h3 className="text-lg font-semibold text-slate-900 mb-3">Add New Category</h3>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newCategory}
                    onChange={(e) => setNewCategory(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleAddCategory()}
                    className="flex-1 px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    placeholder="Enter category name"
                  />
                  <Button
                    onClick={handleAddCategory}
                    className="bg-green-500 hover:bg-green-600"
                    disabled={!newCategory.trim()}
                  >
                    Add
                  </Button>
                </div>
              </div>

              {/* Categories List */}
              <div>
                <h3 className="text-lg font-semibold text-slate-900 mb-3">Current Categories</h3>
                {categories.length === 0 ? (
                  <p className="text-slate-500 text-center py-4">No categories added yet.</p>
                ) : (
                  <div className="space-y-2">
                    {categories.map((category, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-white border border-slate-200 rounded-lg">
                        {editingCategory?.index === index ? (
                          <div className="flex items-center gap-2 flex-1">
                            <input
                              type="text"
                              value={editingCategory.name}
                              onChange={(e) => setEditingCategory({...editingCategory, name: e.target.value})}
                              className="flex-1 px-2 py-1 border border-slate-300 rounded focus:ring-2 focus:ring-green-500 focus:border-green-500"
                            />
                            <Button
                              onClick={handleEditCategory}
                              size="sm"
                              className="bg-green-500 hover:bg-green-600"
                            >
                              Save
                            </Button>
                            <Button
                              onClick={() => setEditingCategory(null)}
                              size="sm"
                              variant="outline"
                            >
                              Cancel
                            </Button>
                          </div>
                        ) : (
                          <>
                            <div className="flex items-center gap-3">
                              <div className="flex items-center justify-center w-8 h-8 bg-slate-100 rounded-lg">
                                {getCategoryIcon(category)}
                              </div>
                              <span className="font-medium text-slate-900">{category}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Button
                                onClick={() => {
                                  setSelectedCategoryForIcon(category)
                                  setShowIconSelector(true)
                                }}
                                size="sm"
                                variant="outline"
                                className="text-purple-600 border-purple-300 hover:bg-purple-50"
                              >
                                <Settings className="h-3 w-3" />
                              </Button>
                              <Button
                                onClick={() => setEditingCategory({index, name: category})}
                                size="sm"
                                variant="outline"
                                className="text-blue-600 border-blue-300 hover:bg-blue-50"
                              >
                                <Edit className="h-3 w-3" />
                              </Button>
                              <Button
                                onClick={() => handleDeleteCategory(index)}
                                size="sm"
                                variant="outline"
                                className="text-red-600 border-red-300 hover:bg-red-50"
                              >
                                <Trash2 className="h-3 w-3" />
                              </Button>
                            </div>
                          </>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Save Button */}
              <div className="flex justify-end gap-3 pt-4 border-t border-slate-200">
                <Button
                  variant="outline"
                  onClick={() => setShowCategories(false)}
                >
                  Cancel
                </Button>
                <Button
                  onClick={saveCategories}
                  className="bg-green-500 hover:bg-green-600"
                >
                  Save Categories
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Icon Selector Modal */}
      {showIconSelector && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-slate-900">
                Select Icon for "{selectedCategoryForIcon}"
              </h2>
              <button
                onClick={() => {
                  setShowIconSelector(false)
                  setSelectedCategoryForIcon('')
                }}
                className="text-slate-400 hover:text-slate-600"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <div className="grid grid-cols-6 md:grid-cols-8 lg:grid-cols-10 gap-3">
              {Object.entries(iconLibrary).map(([iconName, IconComponent]) => (
                <button
                  key={iconName}
                  onClick={() => handleSelectIcon(selectedCategoryForIcon, iconName)}
                  className="flex flex-col items-center justify-center p-3 border border-slate-200 rounded-lg hover:bg-slate-50 hover:border-slate-300 transition-colors"
                >
                  <IconComponent className="h-6 w-6 text-slate-600 mb-1" />
                  <span className="text-xs text-slate-500 text-center">{iconName}</span>
                </button>
              ))}
            </div>

            <div className="flex justify-end mt-6 pt-4 border-t border-slate-200">
              <Button
                variant="outline"
                onClick={() => {
                  setShowIconSelector(false)
                  setSelectedCategoryForIcon('')
                }}
              >
                Cancel
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 